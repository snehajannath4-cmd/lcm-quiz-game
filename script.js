// Global variables
let currentScore = 0;
let currentLevel = 1;
let numberMax = 10;
let correctAnswer = 0;
let questionCounter = 0; 
let currentNum1 = 0;
let currentNum2 = 0;

// --- VOICE NARRATION FUNCTIONS (Remain the same) ---

function speak(text) {
    if (window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
    }
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.rate = 0.9;
    window.speechSynthesis.speak(utterance);
}

function readQuestionAndHint() {
    const num1 = currentNum1;
    const num2 = currentNum2;
    const max = Math.max(num1, num2);

    let speechText = `The current challenge is to find the Least Common Multiple of ${num1} and ${num2}. `;

    if (questionCounter <= 2) {
        speechText += `Remember, the LCM is the smallest number that both ${num1} and ${num2} can divide. A hint: it must be ${max} or larger. Try multiplying ${max} by 1, then 2, then 3, and so on, until the number is also divisible by the other number. Good luck!`;
    } else {
        speechText += `You can ask for a hint if you need help!`;
    }
    
    speak(speechText);
}


// --- SCREEN TRANSITION FUNCTIONS (Remain the same) ---

function showIntro() {
    document.getElementById('greetingScreen').style.display = 'none';
    document.getElementById('introScreen').style.display = 'flex'; 
}

function startGame() {
    document.getElementById('introScreen').style.display = 'none';
    document.getElementById('mainContent').style.display = 'block';
    nextQuestion(); 
}


// --- HELPER FUNCTIONS ---

function calculateLCM(a, b) {
    let max = Math.max(a, b);
    let lcm = max;
    while (true) {
        if (lcm % a === 0 && lcm % b === 0) {
            return lcm;
        }
        lcm += max;
    }
}

function updateScore(points) {
    currentScore += points;
    const scoreElement = document.getElementById('score');
    scoreElement.innerText = Math.floor(currentScore); 
    
    scoreElement.style.transform = 'scale(1.3)';
    setTimeout(() => { scoreElement.style.transform = 'scale(1.0)'; }, 200);

    if (currentScore >= currentLevel * 5) {
        currentLevel++;
        document.getElementById('level').innerText = currentLevel;
        numberMax += 5;
        alert(`Level Up! 🎉 You're now on Level ${currentLevel}! The numbers are getting bigger!`);
    }
}

// --- NEW FUNCTION: Generates Plausible Incorrect Answers ---
function generateIncorrectOptions(lcm, a, b) {
    const options = new Set();
    
    // 1. Product (Common mistake)
    options.add(a * b);

    // 2. Maximum (Common mistake)
    options.add(Math.max(a, b));

    // 3. Simple Multiple/Near Miss (LCM + min(a,b))
    options.add(lcm + Math.min(a, b));
    
    // 4. Half the Product or a simple multiple
    let randomNum;
    do {
        // Range up to 2 * LCM, or max 100
        randomNum = Math.floor(Math.random() * (Math.min(lcm * 2, 100))) + 1;
    } while (options.has(randomNum) || randomNum === lcm || randomNum === 0);
    options.add(randomNum);

    // Filter out the correct answer if generated by chance, and ensure we only return 3
    options.delete(lcm);
    
    return Array.from(options).filter(num => num > 0).slice(0, 3);
}

// --- NEW FUNCTION: Renders the Buttons ---
function renderOptions(lcm, a, b) {
    const container = document.getElementById('optionsContainer');
    container.innerHTML = '';
    
    let incorrectOptions = generateIncorrectOptions(lcm, a, b);
    let allOptions = [...incorrectOptions, lcm];

    // Shuffle the options array using Fisher-Yates algorithm
    for (let i = allOptions.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [allOptions[i], allOptions[j]] = [allOptions[j], allOptions[i]];
    }

    allOptions.forEach(option => {
        const button = document.createElement('button');
        button.innerText = option;
        button.classList.add('option-btn');
        // We pass the option value to the check function
        button.onclick = (event) => checkAnswer(option, event.target); 
        container.appendChild(button);
    });
}


// --- GAME LOGIC FUNCTIONS ---

function nextQuestion() {
    questionCounter++; 

    const num1Element = document.getElementById('num1');
    const num2Element = document.getElementById('num2');
    const resultElement = document.getElementById('lcmResult');

    // Generate random numbers
    currentNum1 = Math.floor(Math.random() * numberMax) + 2; 
    currentNum2 = Math.floor(Math.random() * numberMax) + 2;
    while (currentNum1 === currentNum2) { currentNum2 = Math.floor(Math.random() * numberMax) + 2; }

    correctAnswer = calculateLCM(currentNum1, currentNum2);

    // Update the display
    num1Element.innerText = currentNum1;
    num2Element.innerText = currentNum2;
    
    resultElement.classList.remove('result-success', 'result-error');
    resultElement.innerText = `What is the LCM of ${currentNum1} and ${currentNum2}? Solve it for a star!`;
    
    // RENDER the new options
    renderOptions(correctAnswer, currentNum1, currentNum2);

    // Update buttons
    document.getElementById('hintBtn').style.display = 'inline-block'; 
    document.getElementById('nextBtn').style.display = 'none';
    document.getElementById('hintBtn').disabled = false;
    document.getElementById('hintBtn').innerText = "Ask for a Hint";

    // Trigger voice explanation for first two questions
    if (questionCounter <= 2) {
        readQuestionAndHint(); 
    }
}


function askHint() {
    // Logic remains the same, using currentNum1/2
    if (window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
    }
    const resultElement = document.getElementById('lcmResult');
    const max = Math.max(currentNum1, currentNum2);

    resultElement.classList.remove('result-success', 'result-error');
    
    if (currentScore > 0) {
        currentScore = Math.floor(currentScore) - 1; 
        updateScore(0); 
    }

    const hintMessage = `💡 HINT: The LCM must be ${max} or larger. Start checking multiples from ${max} and skip-count by ${max}!`;
    resultElement.innerText = hintMessage;
    
    speak(`The hint is: ${hintMessage}`);
    
    document.getElementById('hintBtn').disabled = true;
    document.getElementById('hintBtn').innerText = "Hint Used!";
}


function checkAnswer(userAnswer, buttonClicked) {
    if (window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
    }
    
    const resultElement = document.getElementById('lcmResult');
    
    // Disable all option buttons after the first click
    const allButtons = document.querySelectorAll('.option-btn');
    allButtons.forEach(btn => btn.disabled = true);

    if (userAnswer === correctAnswer) {
        // Correct Answer!
        const compliments = ["Awesome! 🎉", "Perfect! 🌟", "Good Job! 👍", "You Got It! 🥳"];
        const compliment = compliments[Math.floor(Math.random() * compliments.length)];
        
        updateScore(1);
        resultElement.classList.add('result-success');
        resultElement.innerText = `${compliment} The LCM of ${currentNum1} and ${currentNum2} is ${correctAnswer}!`;
        speak(`${compliment} The LCM of ${currentNum1} and ${currentNum2} is ${correctAnswer}!`);
        
        buttonClicked.classList.add('option-correct');

    } else {
        // Wrong Answer!
        resultElement.classList.add('result-error');
        resultElement.innerText = `Oops! Not quite. The correct LCM of ${currentNum1} and ${currentNum2} is ${correctAnswer}. Try the next one!`;
        speak(`Oops! Not quite. The correct LCM of ${currentNum1} and ${currentNum2} is ${correctAnswer}.`);
        
        buttonClicked.classList.add('option-incorrect');
        
        // Highlight the correct answer
        allButtons.forEach(btn => {
            if (parseInt(btn.innerText) === correctAnswer) {
                btn.classList.add('option-correct');
            }
        });
    }

    // Actions common to both correct and incorrect
    document.getElementById('nextBtn').style.display = 'inline-block';
    document.getElementById('hintBtn').style.display = 'none'; 
}
